<!--
***********************************************************************************************
CrossCompile.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps/targets required to build Visual C++ projects
specifically on x64 platforms.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="Microsoft.Build.Linux.Cross.Tasks.Compile" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Cross.Tasks.Ld" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="Microsoft.Build.Linux.Cross.Tasks.Ar" AssemblyFile="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"/>
  <UsingTask TaskName="MultiToolTask" AssemblyFile="$(VCTargetsPath)\Microsoft.Build.CppTasks.Common.dll" />

  <Target Name="_Compile" Condition="'@(ClCompile)' != ''" DependsOnTargets="SelectClCompile">
    <_Compile
      Sources="@(ClCompile)"
      ObjectFileName="%(ClCompile.ObjectFileName)"
      DebugInformationFormat="%(ClCompile.DebugInformationFormat)"
      TreatWarningAsError="%(ClCompile.TreatWarningAsError)"
      Verbose="%(ClCompile.Verbose)" />
  </Target>

  <Target Name="_AssignProjectReferencesPlatformType">
    <ItemGroup>
      <_MSBuildProjectReferenceExistent Include="@(_MSBuildProjectReferenceExistent)">
        <ProjectApplicationType>CrossCompile</ProjectApplicationType>
      </_MSBuildProjectReferenceExistent>
    </ItemGroup>
  </Target>

  <!-- *******************************************************************************************
        Compile/Link targets and tasks
       ******************************************************************************************* -->

  <PropertyGroup>
    <AfterBuildLinkTargets>
      $(AfterBuildLinkTargets);
    </AfterBuildLinkTargets>
  </PropertyGroup>

  <Target Name="FixupCLCompileOptions" Condition="'@(ClCompile)' != ''">
    <ItemGroup>
      <ClCompile>
        <PrecompiledHeaderFile Condition="'%(ClCompile.PrecompiledHeader)' != 'Use'"></PrecompiledHeaderFile>
        <WarningLevel Condition="'%(WarningLevel)' == 'Level1' or '%(WarningLevel)' == 'Level2' or '%(WarningLevel)' == 'Level3'">EnableAllWarnings</WarningLevel>
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.c'">CompileAsC</CompileAs>
      </ClCompile>

      <ClCompile>
        <!-- Still unknown extension, assume C++ -->
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'Default'">CompileAsCpp</CompileAs>
      </ClCompile>

      <ClCompile>
        <!-- Only Pass C++ standard to Cpp files -->
        <!-- C/ObjC share the same standard, and C++/ObjC++ share the same standard -->
        <CLanguageStandard Condition="'%(ClCompile.CompileAs)' == 'CompileAsCpp'"></CLanguageStandard>
        <CppLanguageStandard Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'"></CppLanguageStandard>
        <!-- GCC does not allow Wno-pointer-sign for C++ -->
        <CAdditionalWarning Condition="'%(ClCompile.CompileAs)' == 'CompileAsCpp'"></CAdditionalWarning>
        <CppAdditionalWarning Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'"></CppAdditionalWarning>
      </ClCompile>
    </ItemGroup>
  </Target>

  <Target Name="ClCompile" Condition="'@(ClCompile)' != ''">

    <ItemGroup>
      <ClCompile>
        <AdditionalWarning>%(ClCompile.CAdditionalWarning);%(ClCompile.CppAdditionalWarning)</AdditionalWarning>
        <AdditionalIncludeDirectories>%(ClCompile.AdditionalIncludeDirectories);$(IncludePath)</AdditionalIncludeDirectories>
      </ClCompile>
    </ItemGroup>

    <MultiToolTask Condition="'%(ClCompile.ExcludedFromBuild)' != 'true' and '$(UseMultiToolTask)' == 'true'"
      TaskName="Microsoft.Build.Linux.Cross.Tasks.Compile"
      TaskAssemblyName="$(MSBuildthisFileDirectory)Microsoft.Build.Linux.Tasks.dll"
      Sources="@(ClCompile)"

      SchedulerVerbose="$(MultiToolTaskVerbose)"
      SemaphoreProcCount="$(ProcessorNumber)"
      TrackFileAccess="$(TrackFileAccess)"
      TrackerLogDirectory="$(TLogLocation)"
      MinimalRebuildFromTracking="%(ClCompile.MinimalRebuildFromTracking)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      ToolExe="$(CCompileToolExe)"
      ToolPath="$(ToolsDir)"
      ToolArchitecture="$(ToolsArchitecture)"
      TrackerFrameworkPath="$(CLTrackerFrameworkPath)"
      TrackerSdkPath="$(CLTrackerSdkPath)"
      EnableExecuteTool="$(ClangEnableExecuteTool)"
    >
    </MultiToolTask>

    <Compile Condition="'%(ClCompile.ExcludedFromBuild)' != 'true' and '$(UseMultiToolTask)' != 'true'"
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      ToolExe="$(CCompileToolExe)"
      ToolPath="$(ToolsDir)"
      ToolArchitecture="$(ToolsArchitecture)"
      TrackerLogDirectory="$(TLogLocation)"
      TrackerSdkPath="$(CLTrackerSdkPath)"
      TrackerFrameworkPath="$(CLTrackerFrameworkPath)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(ClCompile.MinimalRebuildFromTracking)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      EnableExecuteTool="$(EnableExecuteTool)"
      Sources="@(ClCompile)"
      SysRoot="%(ClCompile.SysRoot)"
      AdditionalIncludeDirectories="%(ClCompile.AdditionalIncludeDirectories)"
      DebugInformationFormat="%(ClCompile.DebugInformationFormat)"
      ObjectFileName="%(ClCompile.ObjectFileName)"
      WarningLevel="%(ClCompile.WarningLevel)"
      TreatWarningAsError="%(ClCompile.TreatWarningAsError)"
      AdditionalWarning="%(ClCompile.AdditionalWarning)"
      Verbose="%(ClCompile.Verbose)"
      Optimization="%(ClCompile.Optimization)"
      StrictAliasing="%(ClCompile.StrictAliasing)"
      UnrollLoops="%(ClCompile.UnrollLoops)"
      LinkTimeOptimization="%(ClCompile.LinkTimeOptimization)"
      OmitFramePointers="%(ClCompile.OmitFramePointers)"
      NoCommonBlocks="%(ClCompile.NoCommonBlocks)"
      PreprocessorDefinitions="%(ClCompile.PreprocessorDefinitions)"
      UndefinePreprocessorDefinitions="%(ClCompile.UndefinePreprocessorDefinitions)"
      UndefineAllPreprocessorDefinitions="%(ClCompile.UndefineAllPreprocessorDefinitions)"
      ShowIncludes="%(ClCompile.ShowIncludes)"
      PositionIndependentCode="%(ClCompile.PositionIndependentCode)"
      RelaxIEEE="%(ClCompile.RelaxIEEE)"
      HideInlineMethods="%(ClCompile.HideInlineMethods)"
      SymbolsHiddenByDefault="%(ClCompile.SymbolsHiddenByDefault)"
      ExceptionHandling="%(ClCompile.ExceptionHandling)"
      CLanguageStandard="%(ClCompile.CLanguageStandard)"
      CppLanguageStandard="%(ClCompile.CppLanguageStandard)"
      CompileAs="%(ClCompile.CompileAs)"
      ForcedIncludeFiles="%(ClCompile.ForcedIncludeFiles)"
      AdditionalOptions="%(ClCompile.AdditionalOptions)">
    </Compile>
  </Target>

  <Target Name="Link" Condition="'@(Link)' != ''">
    <Ld
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      ToolExe="$(LdToolExe)"
      ToolPath="$(ToolsDir)"
      ToolArchitecture="$(ToolsArchitecture)"
      TrackerLogDirectory="$(TLogLocation)"
      TrackerSdkPath="$(CLTrackerSdkPath)"
      TrackerFrameworkPath="$(CLTrackerFrameworkPath)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(Link.MinimalRebuildFromTracking)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      EnableExecuteTool="$(EnableExecuteTool)"
      Sources="@(Link)"
      SysRoot="%(Link.SysRoot)"
      OutputFile="%(Link.OutputFile)"
      ShowProgress="%(Link.ShowProgress)"
      Version="%(Link.Version)"
      VerboseOutput="%(Link.VerboseOutput)"
      Trace="%(Link.Trace)"
      TraceSymbols="%(Link.TraceSymbols)"
      PrintMap="%(Link.PrintMap)"
      OptimizeForMemory="%(Link.OptimizeForMemory)"
      SharedLibrarySearchPath="%(Link.SharedLibrarySearchPath)"
      AdditionalLibraryDirectories="%(Link.AdditionalLibraryDirectories)"
      IgnoreSpecificDefaultLibraries="%(Link.IgnoreSpecificDefaultLibraries)"
      IgnoreDefaultLibraries="%(Link.IgnoreDefaultLibraries)"
      AdditionalDependencies="%(Link.AdditionalDependencies)"
      ForceUndefineSymbolReferences="%(Link.ForceUndefineSymbolReferences)"
      LibraryDependencies="%(Link.LibraryDependencies)"
      DebuggerSymbolInformation="%(Link.DebuggerSymbolInformation)"
      GenerateMapFile="%(Link.GenerateMapFile)"
      AdditionalOptions="%(Link.AdditionalOptions)">
    </Ld>
  </Target>

  <Target Name="Lib" Condition="'@(Lib)' != ''">
    <Ar
      Sources="@(Lib)"
      Command="%(Lib.Command)"
      CreateIndex="%(Lib.CreateIndex)"
      CreateThinArchive="%(Lib.CreateThinArchive)"
      NoWarnOnCreate="%(Lib.NoWarnOnCreate)"
      TruncateTimestamp="%(Lib.TruncateTimestamp)"
      SuppressStartupBanner="%(Lib.SuppressStartupBanner)"
      Verbose="%(Lib.Verbose)"
      OutputFile="%(Lib.OutputFile)"
      ToolExe="$(ArToolExe)"
      ToolPath="$(ToolsDir)"
      ToolArchitecture="$(ToolsArchitecture)"
      TrackerLogDirectory="$(TLogLocation)"
      TrackerSdkPath="$(CLTrackerSdkPath)"
      TrackerFrameworkPath="$(CLTrackerFrameworkPath)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(Lib.MinimalRebuildFromTracking)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      EnableExecuteTool="$(ClangEnableExecuteTool)">
    </Ar>
  </Target>

  <Target Name="ContentFilesProjectOutputGroupDependencies" Returns="@(ContentFilesProjectOutputGroupDependency)" DependsOnTargets="BuildOnlySettings;PrepareForBuild;AssignTargetPaths;ResolveReferences">
    <MSBuild
      Projects="@(_MSBuildProjectReferenceExistent)"
      Targets="ContentFilesProjectOutputGroup;ContentFilesProjectOutputGroupDependencies"
      BuildInParallel="$(BuildInParallel)"
      Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
      Condition="'%(_MSBuildProjectReferenceExistent.Extension)' == '.vcxproj' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != ''"
      ContinueOnError="!$(BuildingProject)"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">
       <Output TaskParameter="TargetOutputs" ItemName="ContentFilesProjectOutputGroupDependency"/>
    </MSBuild>
  </Target>
  
  <Target Name="CopyContentToOutDir" DependsOnTargets="ContentFilesProjectOutputGroup;ContentFilesProjectOutputGroupDependencies" >
     <Message Text="@(ContentFilesProjectOutputGroupOutput) ==> $(TargetDir)%(ContentFilesProjectOutputGroupOutput.TargetPath)" Importance="Low" Condition="'@(ContentFilesProjectOutputGroupOutput)' != ''" />
     <Message Text="@(ContentFilesProjectOutputGroupDependency) ==> $(TargetDir)%(ContentFilesProjectOutputGroupDependency.TargetPath)" Importance="Low" Condition="'@(ContentFilesProjectOutputGroupDependency)' != ''"/>

     <Copy SourceFiles="@(ContentFilesProjectOutputGroupOutput->FullPath()->Distinct())" DestinationFiles="$(TargetDir)\approot$(TargetName)\%(ContentFilesProjectOutputGroupOutput.TargetPath)" SkipUnchangedFiles="true" Condition="'@(ContentFilesProjectOutputGroupOutput)' != ''">
       <Output TaskParameter="CopiedFiles" ItemName="ContentCopiedToOutDir" />
     </Copy>
     <Copy SourceFiles="@(ContentFilesProjectOutputGroupDependency->FullPath()->Distinct())" DestinationFiles="$(TargetDir)\approot$(TargetName)\%(ContentFilesProjectOutputGroupDependency.TargetPath)" SkipUnchangedFiles="true" Condition="'@(ContentFilesProjectOutputGroupDependency)' != ''">
       <Output TaskParameter="CopiedFiles" ItemName="ContentCopiedToOutDir" />
     </Copy>
       </Target>
  
  <!-- Designtime definitions -->
  <!-- Property pages -->
  <ItemGroup>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\general_CrossCompile.xml">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(VCTargetsPath)$(LangID)\folder.xml">
      <Context>File;BrowseObject</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\directories_linux.xml"/>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\remote_debugger_linux.xml"/>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\gcc_CrossCompile.xml"/>
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\ld_CrossCompile.xml" />
    <PropertyPageSchema Include="$(LinuxCommonTargetsPath)$(LangID)\ar_CrossCompile.xml" />
  </ItemGroup>

  <ItemGroup>
    <ProjectCapability Include="LinuxNative"/>
    <ProjectCapability Include="LinuxRemoteNative"/>
  </ItemGroup>

  <Import Project="$(LinuxCommonTargetsPath)\Linux.Cross.Common.targets" />
  <!--<Import Project="$(LinuxCommonTargetsPath)\Linux.Common.targets" />-->
</Project>
